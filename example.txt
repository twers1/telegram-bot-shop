 # photo = message.photo[-1].file_id
    # data = await state.get_data()
    # item: Item = data.get("item")
    # item.photo = photo
    # await message.answer_photo(
    #     photo=photo,
    #     caption="Название: {name}"
    #         "\nПришлите мне цену товара или нажмите /cancel".format(name=item.name)
    # )
    # await NewItem.price.set()
    # await state.update_data(item=item)
  # FSMContextname = message.text
    # item = Item()
    # item.name = name
    # await message.answer("Название: {name}"
    #                      "\nПришлите мне фотографию товара или нажмите /cancel".format(name=name))
    # await NewItem.photo.set()
    # await state.update_data(item=item)
  # data = await state.get_data()
    # item: Item = data.get("item")
    # try:
    #     price = int(message.text)
    # except ValueError:
    #     await message.answer("Неверное значение, введите число")
    #     return
    #
    # item.price = price
    # markup = InlineKeyboardMarkup(
    #     inline_keyboard=
    #     [
    #         [InlineKeyboardButton(text="Да", callback_data="confirm")],
    #         [InlineKeyboardButton(text="Ввести заново", callback_data="change")]
    #     ]
    # )
    # await message.answer(("Цена: {price}:,\n"
    #                      "Подтверждаете? Нажмите /cancel , чтобы отменить"), reply_markup = markup)
    #
    # await state.update_data(item=item)
    # await NewItem.Confirm.set()

#  @dp.callback_query_handler(text_contains="change", state=NewItem.confirm)
# async def change_price(call: types.CallbackQuery):
#     await call.message.edit_reply_markup()
#     await call.message.answer("Ввелите заново цену товара")
#     await NewItem.price.set()

#  @dp.callback_query_handler(text_contains="confirm", state=NewItem.confirm)
# async def confirm(call: types.CallbackQuery, state: FSMContext):
#     await call.message.edit_reply_markup()
#     data = await state.get_data()
#     await call.message.answer("Товар удачно создан")
#     await state.reset_state()


 # Второй метод remove goods

#  @dp.message_handler(text="Удалить товар", state=Get_Goods_Page.page)
# async def send_remove_goods(callback: types.CallbackQuery, state: FSMContext):
#     keyboards = await get_all_goods_keyboard("remove")
#
#     await callback.message.edit_text("<b>Нажмите на товар чтобы удалить его:</b>")
#     await callback.message.edit_reply_markup(reply_markup=keyboards[1])
#
#     async with state.proxy() as data:
#         data["keyboards"] = keyboards
#         data["page"] = 1

#  # узнать id профиля

# @dp.message_handler(commands=['id'])
# async def cmd_id(message: types.Message):
#     await message.answer(f'{message.from_user.id}')

 # пример еще одной команды

 # @dp.message_handler(Command("items"))
# async def show_items(message: Message):
#     await message.answer(text="На продажу у нас есть: ..\n"
#                          "Если вам ничего не нужно - ждите отмену",
#                          reply_markup=choice)
#
# @dp.callback_query_handler(text_contains="pear")
# async def buying_pear(call: CallbackQuery):
#     await call.answer(cache_time=60)
#     callback_data = call.data
#     logging.info(f"call = {callback_data}")
#
#     await call.message.answer("Вы выбрали купить грушу. Груша всего одна. Спаасибо",
#                               reply_markup=pear_keyboard)
#
# @dp.callback_query_handler(buy_callback.filter(item_name="apple"))
# async def buying_apples(call: CallbackQuery, callback_data: dict):
#     await call.answer(cache_time=60)
#     logging.info(f"call = {callback_data}")
#     quantity = callback_data.get("quantity")
#     await call.message.answer(f"Вы выбрали купить яблоки. Яблок всего {quantity}. Спасибо!",
#                               reply_markup=apples_keyboard)
#
# @dp.callback_query_handler(text="cancel")
# async def cancel_buying(call: CallbackQuery):
#     await call.answer("Вы отменили эту покупку",
#                       show_alert=True)
#     await call.message.edit_reply_markup()

#  catalog_list = InlineKeyboardMarkup(row_width=2)
# catalog_list.add(InlineKeyboardButton(text='Категория 1', url='https://t.me/testShopTeg_bot'),
#                  InlineKeyboardButton(text='Категория 2', url='https://t.me/testShopTeg_bot'),
#                  InlineKeyboardButton(text='Категория 3', url='https://t.me/testShopTeg_bot'))

# catalog_list_callback_data = InlineKeyboardMarkup(row_width=2)
# catalog_list_callback_data.add()

 # # Получаем количество выбранного товара в корзине и обновляем карточку товара
    #
    # cart_items_count = await get_cart_items_count(good_id, callback_query.from_user.id)
    # await update_good_card(
    #     message=callback_query.message,
    #     good_name=good_name,
    #     good_description=good_description,
    #     good_price=good_price,
    #     good_image=good_image,
    #     user_id=callback_query.from_user.id,
    #     good_id=good_id,
    # )



    # # Если количество выбранного товара в корзине равно 0, то удаляем товар из корзины полностью
    # if cart_items_count == 0:
    #     await remove_good_from_cart(callback_query.from_user.id, good_id)


# @dp.callback_query_handler(lambda c: c.data and c.data.startswith(f'good:return_to_menu'), state="*")
# async def return_to_catalog(callback: types.CallbackQuery, state: FSMContext):
#     await send_cart_good(callback, state)


 # @dp.message_handler(text="Заказы", state=Get_Goods_Page.page)
# async def get_user_order(message: types.Message, state: FSMContext):
#     orders = await get_all_orders()
#
#     orders_text = "Список заказов:\n\n"
#     for order in orders:
#         orders_text += f"ФИО: {order[0]}\nНомер телефона: {order[1]}\nСпособ доставки: {order[2]}\nСпособ оплаты: {order[3]}\nНомер заказа: {order[4]}\n\n"
#     await message.answer(orders_text)