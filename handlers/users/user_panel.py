from aiogram.dispatcher import FSMContext
from aiogram.types import (LabeledPrice, InlineKeyboardMarkup, InlineKeyboardButton)
from aiogram import types

from loader import  bot
from keyboards.inline.choice_buttons import main, main_admin, cart_markup, delivery_keyboard, \
    payment_keyboard, generate_cart_all
from loader import dp
import os

from states import Get_Goods_Page, YourForm
from utils.db_functions import get_good_from_db, delete_cart, save_order, generate_order_number, \
    get_category_id_by_name, get_cart_items_count, get_cart_items, update_good_quantity
from utils.inline_keyboards import get_all_goods_keyboard, get_all_categories_keyboard, update_good_card, \
    subtract_good_from_cart
from utils.db_functions import get_cart, add_good_to_cart


@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    await message.answer(f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω!', reply_markup=main)

    if message.from_user.id == int(os.getenv('ADMIN_ID')):
        await message.answer(f'–í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª–∏—Å—å –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä', reply_markup=main_admin)

    await Get_Goods_Page.first()

# @dp.message_handler()
# async def ggggg(message: types.Message):
#     print(message.text)
#
# @dp.message_handler(state='*')
# async def ggggg_state(message: types.Message, state: FSMContext):
#     print(message.text, await state.get_state())


@dp.message_handler(text='–ö–∞—Ç–∞–ª–æ–≥', state=Get_Goods_Page.page)
async def send_catalog_start(message: types.Message, state: FSMContext):
    keyboards_category = await get_all_categories_keyboard("get")
    print(keyboards_category.keys())

    await bot.send_message(text="<b>üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤!</b>", chat_id=message.from_user.id)
    await bot.send_message(text="–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤", reply_markup=keyboards_category[1], chat_id=message.from_user.id)

    async with state.proxy() as data:
        data["keyboards"] = keyboards_category
        data["page"] = 1


@dp.message_handler(text="next_page", state=Get_Goods_Page.page)
async def send_next_page(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data["page"] += 1

    state_data = await state.get_data()
    keyboards = state_data["keyboards"]
    page = state_data["page"]

    await message.edit_text(text="<b>–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤:</b>")
    await message.edit_reply_markup(reply_markup=keyboards[page])


@dp.callback_query_handler(text="previous_page", state=Get_Goods_Page.page)
async def send_previous_page(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data["page"] -= 1

    state_data = await state.get_data()
    keyboards = state_data["keyboards"]
    page = state_data["page"]

    await bot.message.edit_text("<b>–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤:</b>")
    await bot.message.edit_reply_markup(reply_markup=keyboards[page])


@dp.callback_query_handler(text_contains="get_category", state=Get_Goods_Page.page)
async def send_cart_good(callback: types.CallbackQuery, state: FSMContext):
    category_id = callback.data.split(":")[1]  # –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ category_id –∏–∑ –∫–æ–ª–ª–±—ç–∫-–¥–∞–Ω–Ω—ã—Ö
    keyboards_goods = await get_all_goods_keyboard("get", category_id=category_id)
    print('–ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á –æ—Ç —Ç–æ–≤–∞—Ä–æ–≤')
    print(keyboards_goods.keys())

    await bot.send_message(text="<b>–¢–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ </b>", chat_id=callback.message.chat.id)
    if len(keyboards_goods) > 0:
        await bot.send_message(text="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä", reply_markup=keyboards_goods[list(keyboards_goods.keys())[0]],
                               chat_id=callback.message.chat.id)

        async with state.proxy() as data:
            data["keyboards"] = keyboards_goods
            data["page"] = 1
    else:
        await bot.send_message(text="–í –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.", chat_id=callback.message.chat.id)
        await state.reset_state()


@dp.callback_query_handler(text_contains="get_good", state=Get_Goods_Page.page)
async def send_good(callback: types.CallbackQuery, state: FSMContext):
    callback_data = callback.data.strip().split(":")[1:]
    good_id = int(callback_data[0])
    good_information = await get_good_from_db(good_id)

    if good_information is None:
        await callback.answer(text="–ò–∑–≤–∏–Ω–∏—Ç–µ, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º—ã–π —Ç–æ–≤–∞—Ä –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.",) # chat_id=callback.message.from_user.id
        return

    good_name, good_description, good_price, good_image, good_quantity = good_information
    price = [LabeledPrice(label=f"{good_name} | {good_description}", amount=good_price)]

    add_to_cart = InlineKeyboardMarkup().add(
        InlineKeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É', callback_data=f'add_to_cart:{good_id}'))
    add_to_cart.add(InlineKeyboardButton(text='–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é', callback_data='return_to_menu'))

    await bot.send_photo(callback.message.chat.id, photo=good_image,caption=f"–ò–º—è —Ç–æ–≤–∞—Ä–∞ - {good_name}\n"
                                                          f"–û–ø–∏—Å–∞–Ω–∏–µ - {good_description}\n"
                                                          f"–¶–µ–Ω–∞ - {good_price}", reply_markup=add_to_cart)

    await callback.message.delete()
    await state.reset_state()


@dp.callback_query_handler(lambda c: c.data and c.data.startswith('add_to_cart'))
async def process_add_to_cart(callback_query: types.CallbackQuery, state: FSMContext):
    good_id = int(callback_query.data.split(':')[1])
    user_id = callback_query.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    good_information = await get_good_from_db(good_id)

    if good_information is None:
        await callback_query.answer(text="–ò–∑–≤–∏–Ω–∏—Ç–µ, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º—ã–π —Ç–æ–≤–∞—Ä –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
        return

    good_name, good_description, good_price, good_image, good_quantity = good_information

    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É —Å –ø–æ–º–æ—â—å—é —Ñ—É–Ω–∫—Ü–∏–∏ add_good_to_cart
    await add_good_to_cart(user_id, good_id, good_name, good_description, good_price, good_quantity)

    await bot.send_message(
        callback_query.from_user.id,
        text=f'üéâ–¢–æ–≤–∞—Ä {good_name} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É.\n–í—ã —Ç—É—Ç –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –æ–¥–∏–Ω —ç–∫–∑–µ–º–ø–ª—è—Ä —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ –∂–µ —É–±—Ä–∞—Ç—å –µ–≥–æ',
        reply_markup=generate_cart_all(good_id)
    )
    print(good_name, good_description)


@dp.callback_query_handler(lambda c: c.data and c.data.startswith(f'good:plus:'), state="*")
async def add_item_to_cart(callback_query: types.CallbackQuery, state: FSMContext):
    print('–Ø –≤ –ø–ª—é—Å–∏–∫–µ')
    print(await state.get_state())
    good_id = int(callback_query.data.split(":")[2])
    print(callback_query.data)
    good_information = await get_good_from_db(good_id)
    good_name, good_description, good_price, good_image, good_quantity = good_information

    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É
    await add_good_to_cart(callback_query.from_user.id, good_id, good_name, good_description, good_price, good_quantity)

    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É —Ç–æ–≤–∞—Ä–∞
    cart_items_count = await get_cart_items_count(callback_query.from_user.id, good_id)
    await update_good_card(callback_query.message, good_name, good_description, good_price, good_image,
                           cart_items_count, good_id)


@dp.callback_query_handler(lambda c: c.data and c.data.startswith(f'good:minus:'), state="*")
async def remove_item_from_cart(callback_query: types.CallbackQuery):
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    good_id = int(callback_query.data.split(":")[2])
    good_information = await get_good_from_db(good_id)
    good_name, good_description, good_price, good_image, good_quantity = good_information

    # –í—ã—á–∏—Ç–∞–µ–º 1 –µ–¥–∏–Ω–∏—Ü—É —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
    await subtract_good_from_cart(
        message=callback_query.message,
        user_id=callback_query.from_user.id,
        good_id=good_id,
        good_name=good_name,
        good_description=good_description
    )

    return
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É —Ç–æ–≤–∞—Ä–∞
    cart_items_count = await get_cart_items_count(good_id, callback_query.from_user.id)
    await update_good_card(
        message=callback_query.message,
        good_name=good_name,
        good_description=good_description,
        good_price=good_price,
        good_image=good_image,
        user_id=callback_query.from_user.id,
        good_id=good_id,
    )

                         
    # # –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ —Ä–∞–≤–Ω–æ 0, —Ç–æ —É–¥–∞–ª—è–µ–º —Ç–æ–≤–∞—Ä –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é
    # if cart_items_count == 0:
    #     await remove_good_from_cart(callback_query.from_user.id, good_id)


# @dp.callback_query_handler(lambda c: c.data and c.data.startswith(f'good:return_to_menu'), state="*")
# async def return_to_catalog(callback: types.CallbackQuery, state: FSMContext):
#     await send_cart_good(callback, state)


@dp.message_handler(text="–í—ã–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def return_to_menu_new_state(message: types.Message):
    await cmd_start(message)


@dp.message_handler(text="–ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É")
async def go_to_cart(message: types.Message, state: FSMContext):
    await show_cart(message, state)


@dp.message_handler(text='–ö–æ—Ä–∑–∏–Ω–∞', state=Get_Goods_Page.page)
async def show_cart(message: types.Message, state: FSMContext):
    # –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∏–º–∞–µ—Ç –Ω–∞ –∫–Ω–æ–ø–∫—É '–ö–æ—Ä–∑–∏–Ω–∞'.
    # message = callback_query.message
    print('–Ø –≤ –∫–æ—Ä–∑–∏–Ω–µ')
    user_id = message.from_user.id
    cart = await get_cart(user_id)

    if not cart:
        await message.answer("–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!")
    else:
        total_price = 0
        cart_text = "<b>–¢–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω–µ:</b>\n\n"
        for good_information in cart:
            good_name, good_description, good_price, good_image = good_information
            cart_text += f"{good_name} | {good_description}\n–¶–µ–Ω–∞ - {good_price}\n\n"
            total_price += good_price

        # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—É—é —Å—É–º–º—É –≤ –∫–æ–Ω—Ü–µ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤
        cart_text += f"<b>–ò—Ç–æ–≥–æ: {total_price}</b>"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –∏ –∏—Ç–æ–≥–æ–≤—É—é —Å—É–º–º—É –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
        await bot.send_message(message.chat.id, text=cart_text, reply_markup=cart_markup, parse_mode="HTML")


@dp.message_handler(text="–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É", state=Get_Goods_Page.page)
async def process_clear_cart(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    await delete_cart(user_id)
    await bot.send_message(message.chat.id, text='–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!')
    await return_to_main_menu(message, state)


@dp.message_handler(text='–ó–∞–∫–∞–∑–∞—Ç—å', state=Get_Goods_Page.page)
async def order_start(message: types.Message, state: FSMContext):
    await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–µ –§–ò–û:')
    await YourForm.name.set()


@dp.message_handler(text='–í—ã–π—Ç–∏', state=Get_Goods_Page.page)
async def quit_carts(message: types.Message, state: FSMContext):
    await cmd_start(message)


@dp.message_handler(state=YourForm.name)
async def process_name(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['fio'] = message.text
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:')
    await YourForm.next()


@dp.message_handler(state=YourForm.phone)
async def process_phone(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['phone_number'] = message.text
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥ –¥–æ—Å—Ç–∞–≤–∫–∏:', reply_markup=delivery_keyboard)
    await YourForm.next()


@dp.message_handler(state=YourForm.delivery)
async def process_delivery(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['delivery_method'] = message.text
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã:', reply_markup=payment_keyboard)
    await YourForm.next()


@dp.message_handler(state=YourForm.payment)
async def process_payment(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['payment_method'] = message.text

    state_data = await state.get_data()
    order_number = generate_order_number()
    fio = state_data['fio']
    phone_number = state_data['phone_number']
    delivery_method = state_data['delivery_method']
    payment_method = state_data['payment_method']
    user_id = message.from_user.id

    # Get cart items
    cart_items = await get_cart_items(user_id)
    goods_amount = {}
    goods_quantity = {}
    for good in cart_items:
        good_id = good[0]
        goods_quantity[good_id] = good[4]
        if good_id not in goods_amount.keys():
            goods_amount[good_id] = 0
        goods_amount[good_id] += 1

    for good_id, quantity in goods_quantity.items():
        amount = goods_amount[good_id]
        new_quantity = quantity - amount
        await update_good_quantity(good_id, new_quantity)

    await save_order(message.from_user.id, fio, phone_number, delivery_method, payment_method, order_number, goods_quantity)
    await delete_cart(user_id)
    await message.answer("<b>–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!</b>")
    await state.finish()
    await return_to_main_menu(message, state)


@dp.message_handler(text='–ö–æ–Ω—Ç–∞–∫—Ç—ã', state=Get_Goods_Page.page)
async def contacts(message: types.Message, state: FSMContext):
    await message.answer('–ö–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —Å–≤—è–∑–∏ [–ê–ª–µ–∫—Å–µ–π](https://t.me/pal1maaaa)', parse_mode='Markdown')


@dp.message_handler(text='–í—ã–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', state=Get_Goods_Page.page)
async def return_to_main_menu(message: types.Message, state: FSMContext):
    await cmd_start(message)


@dp.message_handler()
async def answer(message: types.Message):
    await message.reply('–Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω–∏–º–∞—é')



